{
  "status": "success",
  "tool_name": "get_open_github_prs_and_link_relevant_issues",
  "unit_functions": {
    "get_current_username": {
      "code": "def get_current_username(token: str) -> str:\n    \"\"\"Takes token (str); returns username (str).\n    \n    Args:\n            token (str): The token parameter\n    \n    Returns:\n            str: Function result with status and data or error information\"\"\"\n    try:\n        # Input validation\n        if not token or not isinstance(token, str):\n            return {'status': 'error', 'error_message': 'token must be a non-empty string'}\n\n        # Authentication setup\n        api_key = os.getenv('GITHUB_TOKEN')\n        if not api_key:\n            return {'status': 'error', 'error_message': 'API key not found in environment'}\n        headers = {'Authorization': f'Bearer {api_key}'}\n\n        # API calls\n        # Github API call\n        url = f'https://api.example.com/endpoint'\n        response = requests.get(url, headers=headers, timeout=30)\n        response.raise_for_status()\n        data = response.json()\n\n        return {'status': 'success', 'data': data}\n\n    except requests.exceptions.RequestException as e:\n        return {'status': 'error', 'error_message': f'API request failed: {str(e)}'}\n    except ValueError as e:\n        return {'status': 'error', 'error_message': f'Invalid input: {str(e)}'}\n    except ConnectionError as e:\n        return {'status': 'error', 'error_message': f'Connection failed: {str(e)}'}\n    except Exception as e:\n        return {'status': 'error', 'error_message': f'Unexpected error: {str(e)}'}",
      "imports": "import json\nimport os\nfrom typing import Dict, Any, Optional\nimport requests"
    },
    "fetch_open_prs": {
      "code": "def fetch_open_prs(token: str, username: str) -> List[Dict[str, Any]]:\n    \"\"\"Takes token (str), username (str); returns list of dicts [{title: str, url: str, repo: str, body: str}].\n    \n    Args:\n            token (str): The token parameter\n            username (str): The username parameter\n    \n    Returns:\n            List[Dict[str, Any]]: Function result with status and data or error information\"\"\"\n    try:\n        # Input validation\n        if not token or not isinstance(token, str):\n            return {'status': 'error', 'error_message': 'token must be a non-empty string'}\n        if not username or not isinstance(username, str):\n            return {'status': 'error', 'error_message': 'username must be a non-empty string'}\n\n        # Authentication setup\n        api_key = os.getenv('GITHUB_TOKEN')\n        if not api_key:\n            return {'status': 'error', 'error_message': 'API key not found in environment'}\n        headers = {'Authorization': f'Bearer {api_key}'}\n\n        # API calls\n        # Github API call\n        url = f'https://api.example.com/endpoint'\n        response = requests.get(url, headers=headers, timeout=30)\n        response.raise_for_status()\n        data = response.json()\n\n        return {'status': 'success', 'data': data}\n\n    except requests.exceptions.RequestException as e:\n        return {'status': 'error', 'error_message': f'API request failed: {str(e)}'}\n    except ValueError as e:\n        return {'status': 'error', 'error_message': f'Invalid input: {str(e)}'}\n    except ConnectionError as e:\n        return {'status': 'error', 'error_message': f'Connection failed: {str(e)}'}\n    except Exception as e:\n        return {'status': 'error', 'error_message': f'Unexpected error: {str(e)}'}",
      "imports": "import json\nimport os\nfrom typing import Dict, Any, Optional\nimport requests"
    },
    "extract_linked_issues": {
      "code": "def extract_linked_issues(pr_body: str, repo: str) -> Dict[str, Any]:\n    \"\"\"Takes body (str), repo (str, e.\n    \n    Args:\n            pr_body (str): The pr_body parameter\n            repo (str): The repo parameter\n    \n    Returns:\n            Dict[str, Any]: Function result with status and data or error information\"\"\"\n    try:\n        # Input validation\n        if not pr_body or not isinstance(pr_body, str):\n            return {'status': 'error', 'error_message': 'pr_body must be a non-empty string'}\n        if not repo or not isinstance(repo, str):\n            return {'status': 'error', 'error_message': 'repo must be a non-empty string'}\n\n        # Authentication setup\n        api_key = os.getenv('GITHUB_TOKEN')\n        if not api_key:\n            return {'status': 'error', 'error_message': 'API key not found in environment'}\n        headers = {'Authorization': f'Bearer {api_key}'}\n\n        # API calls\n        # Github API call\n        url = f'https://api.example.com/endpoint'\n        response = requests.get(url, headers=headers, timeout=30)\n        response.raise_for_status()\n        data = response.json()\n\n        return {'status': 'success', 'data': data}\n\n    except requests.exceptions.RequestException as e:\n        return {'status': 'error', 'error_message': f'API request failed: {str(e)}'}\n    except ValueError as e:\n        return {'status': 'error', 'error_message': f'Invalid input: {str(e)}'}\n    except ConnectionError as e:\n        return {'status': 'error', 'error_message': f'Connection failed: {str(e)}'}\n    except Exception as e:\n        return {'status': 'error', 'error_message': f'Unexpected error: {str(e)}'}",
      "imports": "import json\nimport os\nfrom typing import Dict, Any, Optional\nimport requests"
    }
  },
  "combined_imports": "from typing import Dict, Any, Optional\nimport json\nimport os\nimport requests",
  "function_count": 3
}